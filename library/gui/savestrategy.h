/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  \file			savestrategy.h
  \date			Mar 2017
  \author		Nicu Tofan

  \brief		Contains the definition for SaveStrategy class


*//*


 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
#ifndef __DOTVIEWER_SAVE_STRATEGY_INC__
#define __DOTVIEWER_SAVE_STRATEGY_INC__
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

#include <QSettings>
#include <QDebug>

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */

//! What to do when the user asks us to save a file.
struct SaveStrategy {

    enum Strategy {
        Simple, /**< When the user asks the program to save the content
            it will only save the text file. */
        Entangled /**< Both text file and the image generated by it are saved. */
    };

    enum AttachMode {
        AttachAbsolutePath, /**< absolute path of the image file is inserted */
        AttachRelativePath, /**< relative path of the image file is inserted */
        AttachNone /**< the image is not attached to the text file */
    };

    enum EntangleMode {
        SamePathAndName, /**< no user interaction; save along the text file */
        AskOnFirstSave, /**< if the image does not have an associated
            path ask the user on save */
        WaitForSaveAs /**< if the user never clicks save as the
            image will not be saved */
    };

    Strategy strategy_;
    AttachMode attach_;
    EntangleMode entangle_;

    //! Default constructor.
    SaveStrategy() :
        strategy_ (Simple),
        attach_ (AttachNone),
        entangle_ (SamePathAndName)
    {}

    void saveToSettings (QSettings & stg) {
        stg.beginGroup (QStringLiteral ("SaveStrategy"));
        stg.setValue (QStringLiteral("strategy_"), (int)strategy_);
        stg.setValue (QStringLiteral("attach_"), (int)attach_);
        stg.setValue (QStringLiteral("entangle_"), (int)entangle_);
        stg.endGroup ();
    }

    void loadFromSettings (QSettings & stg) {

        QVariant intermed;
        stg.beginGroup (QStringLiteral ("SaveStrategy"));

        intermed = stg.value(QStringLiteral("strategy_"), Simple);
        strategy_ = static_cast<Strategy>(intermed.toInt());
        switch (strategy_) {
        case Simple:
        case Entangled:
            break;
        default:
            qWarning() << "Corrupted SaveStrategy settings; strategy_ is "
                       << intermed.toString();
        }

        intermed = stg.value(QStringLiteral("attach_"), Simple);
        attach_ = static_cast<AttachMode>(intermed.toInt());
        switch (attach_) {
        case AttachAbsolutePath:
        case AttachRelativePath:
        case AttachNone:
            break;
        default:
            qWarning() << "Corrupted SaveStrategy settings; attach_ is "
                       << intermed.toString();
        }

        intermed = stg.value(QStringLiteral("entangle_"), Simple);
        entangle_ = static_cast<EntangleMode>(intermed.toInt());
        switch (entangle_) {
        case SamePathAndName:
        case AskOnFirstSave:
        case WaitForSaveAs:
            break;
        default:
            qWarning() << "Corrupted SaveStrategy settings; attach_ is "
                       << intermed.toString();
        }

        stg.endGroup ();
    }

}; // struct SaveStrategy

/*  CLASS    =============================================================== */
//
//
//
//

#endif // __DOTVIEWER_SAVE_STRATEGY_INC__
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
